#!/bin/bash

#****************************************************************************************************#
#                                        AUTO BACKUP FAILOVER                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# SCRIPT MADE TO RUN BY CRON EVERY MINUTE                                                            #
#----------------------------------------------------------------------------------------------------#

if (($EUID!=0))
then
  echo "You must be root to run this script" 2>&1
  exit 1
fi

#----------------------------------------------------------------------------------------------------#
# CONFIGURATION VARIABLES                                                                            #
#----------------------------------------------------------------------------------------------------#

create_dir="/root/remblock/auto-backup-failover"
config_file="/root/remblock/auto-backup-failover/config"
backup_failover_script_path="/root/remblock/auto-backup-failover/bp-failover"
#PATH to used commands
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
cron_cmd="/root/remblock/auto-backup-failover/auto-backup-failover"
now_epoch="$(date +%s)"

#----------------------------------------------------------------------------------------------------#
# CREATE DIRECTORY IF IT DOESN'T EXIST                                                               #
#----------------------------------------------------------------------------------------------------#

if [ ! -d "$create_dir" ]
then
  mkdir -p "$create_dir"
  cp -p "$0" "$create_dir"
fi

#----------------------------------------------------------------------------------------------------#
# CREATE CONFIG FILE IF IT DOESN'T EXIST                                                             #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$config_file" ]
then
  echo "#Configuration file for the failover script" > "$config_file"
  echo "#Make the entries as variable=value" >> "$config_file"
  echo " " >> "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# INSTALL CRONTAB LINE IF IT DOESN'T EXIST                                                           #
#----------------------------------------------------------------------------------------------------#

if [ ! -z "$cron_cmd" ] && ! crontab -u root -l | grep -v '^ *#' | grep "$cron_cmd" &>/dev/null
then
  (crontab -u root -l ; echo "*/1 * * * * $cron_cmd") | crontab -u root -
fi

#----------------------------------------------------------------------------------------------------#
# GET YES OR NO ANSWER FROM USER                                                                     #
#----------------------------------------------------------------------------------------------------#

function get_user_answer_yn(){
  while :
  do
    read -p "$1 (Y/N): " answer
    answer="$(echo $answer | tr '[:upper:]' '[:lower:]')"
    case "$answer" in
      yes|y) return 0 ;;
      no|n) return 1 ;;
      *) echo  "Invalid Answer [yes/no/y/n expected]";continue;;
    esac
  done
}

#----------------------------------------------------------------------------------------------------#
# GET VALUE FROM THE CONFIG FILE, RETURN IT WITH THE VARIABLE "global_value"                         #
#----------------------------------------------------------------------------------------------------#

function get_config_value() {
  global_value=$(grep -v '^#' "$config_file" | grep "^$1=" | awk -F '=' '{print $2}')
  if [ -z "$global_value" ]
  then
    return 1
  else
    return 0
  fi
}

#****************************************************************************************************#
#                                   GETTING POSSIBLE MISSING VALUE                                   #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# RETRIEVE PRODUCER NAME IF NOT ALREADY SET ON THE CONFIG FILE                                       #
#----------------------------------------------------------------------------------------------------#

if get_config_value accountname
then
  accountname="$global_value"
else
  accountname=$(cat config/config.ini | grep 'producer-name' | awk '{print $3}')
  echo "accountname=$accountname" >> "$config_file"
fi
if  [ -z "$accountname" ]
then
  sed -i "/^accountname=/s/accountname=/accountname=<your account name>/" "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# RETRIEVE WALLET PASSWORD IF NOT ALREADY SET ON THE CONFIG FILE                                     #
#----------------------------------------------------------------------------------------------------#

if get_config_value walletpass
then
  walletpass="$global_value"
else
  walletpass=$(cat walletpass)
  echo "walletpass=$walletpass" >> "$config_file"
fi
if  [ -z "$walletpass" ]
then
  sed -i "/^walletpass=/s/walletpass=/walletpass=<your wallet password>/" "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# RETRIEVE ACTIVE PRODUCER PUBLIC KEY IF NOT ALREADY SET ON THE CONFIG FILE                          #
#----------------------------------------------------------------------------------------------------#

if get_config_value activeproducerpublickey
then
  activeproducerpublickey="$global_value"
else
  activeproducerpublickey=$(remcli get table rem rem producers -L $accountname -U $accountname | grep 'producer_key' | awk '{print $2}' | tr -d '"' | tr -d ',')
  echo "activeproducerpublickey=$activeproducerpublickey" >> "$config_file"
fi
if  [ -z "$activeproducerpublickey" ]
then
  activeproducerpublickey=$(remcli get table rem rem producers -L $accountname -U $accountname | grep 'producer_key' | awk '{print $2}' | tr -d '"' | tr -d ',')
  echo "activeproducerpublickey=$activeproducerpublickey" >> "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# RETRIEVE PERMISSION IF NOT ALREADY SET ON THE CONFIG FILE                                          #
#----------------------------------------------------------------------------------------------------#

if get_config_value producerpermission
then
  producerpermission="$global_value"
else
  producerpermission=$(remcli get account $accountname | grep $activeproducerpublickey | awk '{print $1}' | sed -n 1p)
  echo "producerpermission=$producerpermission" >> "$config_file"
fi
if  [ -z "$producerpermission" ]
then
  sed -i "/^producerpermission=/s/producerpermission=/producerpermission=owner/" "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# RETRIEVE CONFIG PRODUCER PUBLIC KEY IF NOT ALREADY SET ON THE CONFIG FILE                          #
#----------------------------------------------------------------------------------------------------#

if get_config_value configproducerpublickey
then
  configproducerpublickey="$global_value"
else
  configproducerpublickey=$(cat config/config.ini | grep 'signature-provider' | awk '{print $3}' | sed 's/=.*//')
  echo "configproducerpublickey=$configproducerpublickey" >> "$config_file"
  echo ""
fi
if  [ -z "$configproducerpublickey" ]
then
  sed -i "/^configproducerpublickey=/s/configproducerpublickey=/configproducerpublickey=<your config producer public key>/" "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# RETRIEVE TELEGRAM DATA IF NOT ALREADY SET ON THE CONFIG FILE                                       #
#----------------------------------------------------------------------------------------------------#

if get_config_value telegram_enabled
then
  if [ "$global_value" = "true" ]
  then
    telegram_enabled=true
  else
    telegram_enabled=false
  fi
else
  if get_user_answer_yn "ENABLE TELEGRAM NOTIFICATIONS"
  then
    telegram_enabled=true
    echo "telegram_enabled=true" >> "$config_file"
    if get_config_value telegram_token
    then
      telegram_token="$global_value"
    else
      echo ""
      read -p "ENTER YOUR TELEGRAM TOKEN API: " -e telegram_token
      echo "telegram_token=$telegram_token" >> "$config_file"
      echo ""
    fi
    if get_config_value telegram_chatid
    then
      telegram_chatid="$global_value"
    else
      read -p "ENTER YOUR TELEGRAM CHAT ID: " -e telegram_chatid
      echo "telegram_chatid=$telegram_chatid" >> "$config_file"
      echo ""
    fi
  else
    echo "telegram_enabled=false" >> "$config_file"
    echo ""
  fi
fi
if  [ -z "$telegram_token" ]
then
  sed -i "/^telegram_token=/s/telegram_token=/telegram_token=<your telegram api token>/" "$config_file"
fi
if  [ -z "$telegram_chatid" ]
then
  sed -i "/^telegram_chatid=/s/telegram_chatid=/telegram_chatid=<your telegram chat id>/" "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# RETRIEVE USERS BLOCK MINUTE VALUE IF NOT ALREADY SET IN THE CONFIG FILE                            #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_last_block_minutes
then
  check_last_block_minutes="$global_value"
else
  check_last_block_minutes=5
  echo "check_last_block_minutes=$check_last_block_minutes" >> "$config_file"
fi
if  [ -z "$check_last_block_minutes" ]
then
  sed -i "/^check_last_block_minutes=/s/check_last_block_minutes=/check_last_block_minutes=5/" "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# RETRIEVE USERS HEAD BLOCK MINUTE VALUE IF NOT ALREADY SET IN THE CONFIG FILE                       #
#----------------------------------------------------------------------------------------------------#

if get_config_value check_last_head_block_minutes
then
  check_last_head_block_minutes="$global_value"
else
  check_last_head_block_minutes=3
  echo "check_last_head_block_minutes=$check_last_head_block_minutes" >> "$config_file"
fi
if  [ -z "$check_last_head_block_minutes" ]
then
  sed -i "/^check_last_head_block_minutes=/s/check_last_head_block_minutes=/check_last_head_block_minutes=3/" "$config_file"
fi

#----------------------------------------------------------------------------------------------------#
# CREATE THE BACKUP FAILOVER SCRIPT IF IT DOESN' EXIST                                               #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$backup_failover_script_path" ]
then
cat > "$backup_failover_script_path" << 'DOC'
#!/usr/bin/env bash

#----------------------------------------------------------------------------------------------------#
# REGISTER AGAIN AS A BLOCK PRODUCER USING YOUR BACKUP KEYS                                          #
#----------------------------------------------------------------------------------------------------#

remcli wallet unlock --password $walletpass > /dev/null 2>&1
remcli system regproducer $accountname $configproducerpublickey -x 120 -p $accountname@$producerpermission
sudo remnode --config-dir ./config/ --data-dir ./data/ --fix-reversible-blocks --force-all-checks

DOC
  chmod u+x "$backup_failover_script_path"
fi

#****************************************************************************************************#
#                                       FUNCTIONS DEFINITIONS                                        #
#****************************************************************************************************#

#----------------------------------------------------------------------------------------------------#
# SEND THE STRING PARAMETER TO TELEGRAM                                                              #
#----------------------------------------------------------------------------------------------------#

function send_telegram_messages() {
  if [ ! -z "$telegram_token" ] && [ ! -z "$telegram_chatid" ] && $telegram_enabled
  then
    curl -s -X POST https://api.telegram.org/bot$telegram_token/sendMessage -d chat_id=$telegram_chatid -d text="$1" &>/dev/null
  fi
}

#----------------------------------------------------------------------------------------------------#
# TRANSLATE THE TIME FORMAT FROM REMCLI FORMATE TO EPOCH TIME                                        #
#----------------------------------------------------------------------------------------------------#

function remnodelogtime_to_epoch() {
  temp_date="$( echo $1 | awk -F '.' '{ print $1}' | tr '-' '/' | tr 'T' ' ')"
  echo $(date "+%s" -d "$temp_date")
}

#----------------------------------------------------------------------------------------------------#
# FUNCTION THAT CHECKS WHETHER THE NODE HAS ACTUAL PRODUCED A BLOCK WITHIN THE SET MINUTES           #
#----------------------------------------------------------------------------------------------------#

function check_produce_minutes() {
  last_block_date=$(remcli get table rem rem producers -L $accountname -U $accountname | grep 'last_block_time' | awk '{print $2}' | tr -d '"' | tr -d ',')
  last_block_epoch=$(remnodelogtime_to_epoch "$last_block_date")
  last_head_block_date=$(remcli get info | grep 'head_block_time' | awk '{print $2}' | tr -d '"' | tr -d ',')
  last_head_block_epoch=$(remnodelogtime_to_epoch "$last_head_block_date")
  last_block_minutes_in_seconds="$((check_last_block_minutes * 60))"
  last_head_block_minutes_in_seconds="$((check_last_head_block_minutes * 60))"
  if (( ($now_epoch - $last_block_epoch) >= $last_block_minutes_in_seconds )) && (( ($now_epoch - $last_head_block_epoch) <= $last_head_block_minutes_in_seconds )) && (( $configproducerpublickey != $activeproducerpublickey ))
  then
    #Check if the recover script is already running before starting it again
    if ! pgrep 'bp-failover' &> /dev/null
    then
      #Execute Failover only if it's registered
      if [ "$(remcli get table rem rem producers -L $accountname -U $accountname | grep 'is_active' | awk '{print $2}' | tr -d '"' | tr -d ',')" == "1" ]
      then
        export accountname
        export walletpass
        export producerpermission
        export producerpublickey
        bash "$backup_failover_script_path" &>/dev/null
        send_telegram_messages "Auto-Failover script has executed"
      fi
    fi
  fi
}

#----------------------------------------------------------------------------------------------------#
# MAIN PART OF THE SCRIPT                                                                            #
#----------------------------------------------------------------------------------------------------#

if [ ! -f "$create_dir/last_check_epoch.txt" ]
then
  echo $now_epoch > "$create_dir/last_check_epoch.txt"
else
  last_block_minutes_in_seconds="$((check_last_block_minutes * 60))"
  last_head_block_minutes_in_seconds="$((check_last_head_block_minutes * 60))"
  last_check_epoch=$(cat "$create_dir/last_check_epoch.txt")
  if (( ($now_epoch - $last_block_epoch) >= $last_block_minutes_in_seconds )) && (( ($now_epoch - $last_head_block_epoch) <= $last_head_block_minutes_in_seconds )) && (( $configproducerpublickey != $activeproducerpublickey ))
  then
    echo $now_epoch > "$create_dir/last_check_epoch.txt"
    check_produce_minutes
  fi
fi
